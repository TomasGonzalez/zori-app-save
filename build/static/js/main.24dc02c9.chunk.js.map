{
  "version": 3,
  "sources": [
    "assets/login-side-image.png",
    "theme.js",
    "lib/formValidation.js",
    "components/forms/inputs.js",
    "components/Checkbox.js",
    "components/Button.js",
    "screens/Login.js",
    "screens/test.js",
    "lib/MainRouter.js",
    "lib/apollo.js",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "module",
    "exports",
    "color",
    "primary",
    "green1",
    "background",
    "black1",
    "underlineColor",
    "gray1",
    "danger",
    "lightDanger",
    "unit",
    "getRem",
    "px",
    "EMAIL_REGEX",
    "EmailValidator",
    "value",
    "test",
    "MainWrapper",
    "styled",
    "div",
    "StyledInput",
    "input",
    "props",
    "meta",
    "error",
    "theme",
    "touched",
    "ErrorMessage",
    "TextInput",
    "type",
    "placeholder",
    "PasswordInput",
    "TextStyle",
    "StyledCheckbox",
    "withTheme",
    "onClick",
    "onChange",
    "label",
    "StyledButton",
    "buttonStyle",
    "Label",
    "Button",
    "MainContainer",
    "ImageContainer",
    "img",
    "FormContaienr",
    "white",
    "TitleWrapper",
    "TitleUnderline",
    "Title",
    "StyledForm",
    "form",
    "CheckboxWrapper",
    "TempLink",
    "ButtonsWrappers",
    "FormWrapper",
    "AUTH_TOKEN",
    "gql",
    "Login",
    "useState",
    "errorMessage",
    "setErrorMessage",
    "useMutation",
    "tokenAuth",
    "history",
    "data",
    "useHistory",
    "handleSubmit",
    "params",
    "a",
    "email",
    "password",
    "variables",
    "then",
    "request",
    "checkbox",
    "localStorage",
    "setItem",
    "token",
    "sessionStorage",
    "push",
    "console",
    "log",
    "message",
    "replace",
    "alt",
    "src",
    "require",
    "onSubmit",
    "render",
    "validate",
    "name",
    "component",
    "style",
    "marginBottom",
    "marginTop",
    "Test",
    "MainRouter",
    "PrivateRoute",
    "children",
    "rest",
    "location",
    "getItem",
    "to",
    "pathname",
    "state",
    "from",
    "PublicRoute",
    "exact",
    "path",
    "link",
    "HttpLink",
    "uri",
    "cache",
    "InMemoryCache",
    "client",
    "ApolloClient",
    "AppRoot",
    "createGlobalStyle",
    "App",
    "Boolean",
    "window",
    "hostname",
    "match",
    "ReactDOM",
    "StrictMode",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister",
    "catch"
  ],
  "mappings": "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",
  "file": "static/js/main.24dc02c9.chunk.js",
  "sourcesContent": [
    "module.exports = __webpack_public_path__ + \"static/media/login-side-image.3062eb0a.png\";",
    "export default {\n  color: {\n    primary: \"#0C77F8\",\n    green1: \"#1a7b64\",\n    background: \"#ffffff\",\n    black1: \"#000000\",\n    underlineColor: \"rgba(0,0,0,0.35)\",\n    gray1: \"rgba(0,0,0,0.35)\",\n    danger: \"#FC282B\",\n    lightDanger: \"#E27875\"\n  },\n  unit: {\n    getRem(px) {\n      return `${px / 16}rem`;\n    }\n  }\n};\n",
    "const EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // eslint-disable-line\n\nexport const EmailValidator = value => {\n  if (!EMAIL_REGEX.test(value)) {\n    return \"Please enter a valid email address\";\n  }\n};\n\nexport const NotEmptyValidator = value => {\n  if (!value) {\n    return \"This field should not be empty\";\n  }\n};\n",
    "import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst MainWrapper = styled.div``;\n\nconst StyledInput = styled.input`\n  border-width: 0px 0px 1px 0px;\n  border-color: ${props =>\n    (props.meta && props.meta.error) || !props.value\n      ? props.theme.color.danger\n      : props.theme.color.gray1};\n  outline: none;\n  width: 100%;\n  font-size: 14px;\n  padding: 4.5px 0px;\n\n  ::placeholder {\n    color: ${props =>\n      props.meta && props.meta.error && props.meta.touched\n        ? props.theme.color.danger\n        : props.theme.color.gray1};\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  margin-top: 8px;\n  font-size: 12px;\n  color: ${props => props.theme.color.lightDanger};\n`;\n\nexport const TextInput = props => {\n  return (\n    <MainWrapper {...props}>\n      <StyledInput\n        type={props.type}\n        {...props.input}\n        meta={props.meta}\n        placeholder={props.placeholder}\n      />\n      {props.meta.error && props.meta.touched && (\n        <ErrorMessage>{props.meta.error}</ErrorMessage>\n      )}\n    </MainWrapper>\n  );\n};\n\nexport const PasswordInput = props => {\n  return (\n    <MainWrapper {...props}>\n      <StyledInput\n        type={\"password\"}\n        {...props.input}\n        meta={props.meta}\n        placeholder={props.placeholder}\n      />\n      {props.meta.error && props.meta.touched && (\n        <ErrorMessage>{props.meta.error}</ErrorMessage>\n      )}\n    </MainWrapper>\n  );\n};\n",
    "import React from \"react\";\nimport styled, { withTheme } from \"styled-components\";\n\nimport { MdCheck } from \"react-icons/md\";\n\nconst MainWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst TextStyle = styled.div`\n  color: ${props => props.theme.color.green1};\n  font-size: 14px;\n  margin-left: 10px;\n`;\n\nconst StyledCheckbox = styled.div`\n  width: 15px;\n  height: 15px;\n  border: solid 1px ${props => props.theme.color.green1};\n  background-color: ${props =>\n    props.value ? props.theme.color.green1 : \"transparent\"};\n  border-radius: 3px;\n  cursor: pointer;\n`;\n\nconst Checkbox = props => {\n  return (\n    <MainWrapper {...props}>\n      <StyledCheckbox\n        onClick={() => {\n          props.input.onChange(!props.input.value);\n        }}\n        {...props.input}\n      />\n      <TextStyle>{props.label}</TextStyle>\n    </MainWrapper>\n  );\n};\nexport default withTheme(Checkbox);\n",
    "import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledButton = styled.div`\n  width: 296px;\n  height: 48px;\n  border-radius: 6px;\n  border: solid 1px rgba(0, 0, 0, 0.35);\n  background-color: ${props =>\n    props.buttonStyle !== \"dark\"\n      ? props.theme.color.background\n      : props.theme.color.black1};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.8;\n  }\n`;\n\nconst Label = styled.div`\n  font-size: 14px;\n  font-weight: 400;;\n  color: ${props =>\n    props.buttonStyle !== \"dark\"\n      ? props.theme.color.gray1\n      : props.theme.color.background};\n`;\n\nconst Button = props => {\n  return (\n    <StyledButton {...props} buttonStyle={props.buttonStyle}>\n      <Label buttonStyle={props.buttonStyle}>{props.label}</Label>\n    </StyledButton>\n  );\n};\n\nexport default Button;\n",
    "import React, { useState } from \"react\";\n\nimport { Form, Field } from \"react-final-form\";\nimport styled from \"styled-components\";\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { EmailValidator } from \"../lib/formValidation\";\nimport { TextInput, PasswordInput } from \"../components/forms/inputs\";\nimport Checkbox from \"../components/Checkbox\";\nimport Button from \"../components/Button\";\n\nconst MainContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: 100vh;\n`;\n\nconst ImageContainer = styled.img`\n  height: 100vh;\n\n  @media (max-width: 1024px) {\n    display: none;\n  }\n`;\n\nconst FormContaienr = styled.div`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: center;\n  background-color: ${props => props.theme.color.white};\n`;\n\nconst TitleWrapper = styled.div`\n  margin-bottom: 62px;\n`;\n\nconst TitleUnderline = styled.div`\n  width: 18px;\n  height: 3px;\n  background-color: ${props => props.theme.color.green1};\n`;\n\nconst Title = styled.div`\n  font-size: 30px;\n  font-weight: 400;;\n`;\n\nconst StyledForm = styled.form`\n  min-width: 650px;\n  padding: 48px;\n`;\n\nconst CheckboxWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst TempLink = styled.div`\n  width: 204px;\n  height: 17px;\n  font-size: 14px;\n  font-weight: 400;;\n  cursor: pointer;\n  color: ${props => props.theme.color.green1};\n`;\n\nconst ButtonsWrappers = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst FormWrapper = styled.div`\n  max-width: 616px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst ErrorMessage = styled.div`\n  color: ${props => props.theme.color.danger};\n  margin-top: 8px;\n  font-size: 12px;\n`;\n\nfunction Login() {\n  const [errorMessage, setErrorMessage] = useState();\n  const [tokenAuth, { data }] = useMutation(AUTH_TOKEN);\n  let history = useHistory();\n\n  const handleSubmit = async params => {\n    if (params.email && params.password) {\n      try {\n        await tokenAuth({\n          variables: { ...params }\n        }).then(request => {\n          if (params.checkbox) {\n            localStorage.setItem(\"jwtToken\", request.data.tokenAuth.token);\n          }\n          sessionStorage.setItem(\"jwtToken\", request.data.tokenAuth.token);\n          history.push(\"/test\");\n        });\n      } catch (err) {\n        console.log(err);\n        setErrorMessage(err.message.replace(\"GraphQL error: \", \"\"));\n      }\n    }\n  };\n\n  return (\n    <MainContainer>\n      <ImageContainer\n        alt='Office Deskt'\n        src={require(\"../assets/login-side-image.png\")}\n      />\n      <FormContaienr>\n        <Form\n          onSubmit={handleSubmit}\n          render={({ handleSubmit }) => (\n            <StyledForm>\n              <TitleWrapper>\n                <Title>Log in</Title>\n                <TitleUnderline />\n                {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\n              </TitleWrapper>\n              <FormWrapper>\n                <Field\n                  validate={EmailValidator}\n                  name='email'\n                  component={TextInput}\n                  style={{ marginBottom: 84 }}\n                  placeholder='Enter your email address'\n                />\n                <Field\n                  name='password'\n                  component={PasswordInput}\n                  placeholder='Enter your password'\n                />\n                <Field name='checkbox'>\n                  {({ input }) => (\n                    <CheckboxWrapper style={{ marginTop: 8 }}>\n                      <Checkbox input={input} label='stay signed in' />\n                      <TempLink>did you forget your password?</TempLink>\n                    </CheckboxWrapper>\n                  )}\n                </Field>\n                <ButtonsWrappers style={{ marginTop: 80 }}>\n                  <Button label={\"Sign up\"} />\n                  <Button\n                    onClick={handleSubmit}\n                    buttonStyle='dark'\n                    label={\"Log in\"}\n                  />\n                </ButtonsWrappers>\n              </FormWrapper>\n            </StyledForm>\n          )}\n        />\n      </FormContaienr>\n    </MainContainer>\n  );\n}\n\nconst AUTH_TOKEN = gql`\n  mutation TokenAuth($email: String!, $password: String!) {\n    tokenAuth(username: $email, password: $password) {\n      token\n    }\n  }\n`;\n\nexport default Login;\n",
    "import React from \"react\";\n\nconst Test = () => {\n  return <div>You are logged in</div>;\n};\n\nexport default Test;\n",
    "import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport Login from \"../screens/Login\";\nimport Test from \"../screens/test\";\n\nexport default function MainRouter() {\n  const PrivateRoute = ({ children, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        render={({ location }) =>\n          localStorage.getItem(\"jwtToken\") ||\n          sessionStorage.getItem(\"jwtToken\") ? (\n            children\n          ) : (\n            <Redirect\n              to={{\n                pathname: \"/login\",\n                state: { from: location }\n              }}\n            />\n          )\n        }\n      />\n    );\n  };\n\n  const PublicRoute = ({ children, ...rest }) => {\n    return (\n      <Route\n        {...rest}\n        exact\n        render={() =>\n          localStorage.getItem(\"jwtToken\") ||\n          sessionStorage.getItem(\"jwtToken\") ? (\n            <Redirect\n              to={{\n                pathname: \"/\"\n              }}\n            />\n          ) : (\n            children\n          )\n        }\n      />\n    );\n  };\n\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route\n            exact\n            path='/'\n            render={() =>\n              localStorage.getItem(\"jwtToken\") ||\n              sessionStorage.getItem(\"jwtToken\") ? (\n                <Redirect to='/test' />\n              ) : (\n                <Redirect to='/login' />\n              )\n            }\n          />\n          <PublicRoute path='/login'>\n            <Login />\n          </PublicRoute>\n          <PrivateRoute path='/test'>\n            <Test />\n          </PrivateRoute>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n",
    "import { ApolloClient } from \"apollo-client\";\nimport gql from \"graphql-tag\";\nimport { HttpLink } from \"apollo-link-http\";\nimport { InMemoryCache, NormalizedCacheObject } from \"apollo-cache-inmemory\";\n\nconst link = new HttpLink({\n  uri: \"http://zorishop-dev.us-west-2.elasticbeanstalk.com/graphql/\"\n});\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link,\n  cache\n});\n\nexport default client;\n",
    "import React from \"react\";\n\nimport { ThemeProvider, createGlobalStyle } from \"styled-components\";\nimport theme from \"./theme\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\n\nimport MainRouter from \"./lib/MainRouter\";\nimport client from \"./lib/apollo\";\n\nexport const AppRoot = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css?family=Rubik&display=swap);\n\n  *{\n    font-family: 'Rubik', sans-serif;\n  }\n`;\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={theme}>\n        <AppRoot />\n        <MainRouter />\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}
